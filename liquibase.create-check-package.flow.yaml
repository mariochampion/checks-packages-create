##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########


## Set up a filewith some boilerplate info to be added to the file to be created
include:
  CHECKSPACKAGE_MASTERFILE_HEADER: "liquibase.checks-package-header.yaml"
  
  
## Set up some global variables for property substitution in ANY stage
globalVariables:
  CHKSPKGSDIR: "./checks-pkgs"
  BASECHECKSFILE: "liquibase.checks-settings.conf"
  
  ACCESSCONTROL_FILE: "liquibase.checks.access-control.yaml"
  ACCESSCONTROL_CHECKS: "SqlGrantWarn,SqlGrantOptionWarn,SqlGrantAdminWarn,SqlRevokeWarn"
  ACCESSCONTROL_PKGNAME: "access-control.pkg"
  
  DATAPROTECTION_FILE: "liquibase.checks.data-protection.yaml"
  DATAPROTECTION_CHECKS: "ModifyDataTypeWarn,SqlSelectStarWarn,ChangeTruncateTableWarn"
  DATAPROTECTION_PKGNAME: "data-protection.pkg"
  
  SCHEMAPROTECTION_FILE: "liquibase.checks.schema-protection.yaml"    
  SCHEMAPROTECTION_CHECKS: "WarnOnUseDatabase,TableColumnLimit,ChangeDropTableWarn,ChangeDropColumnWarn,DetectChangeType"
  SCHEMAPROTECTION_PKGNAME: "schema-protection.pkg"
  
  CHANGESETSTANDARDS_FILE: "liquibase.checks.changeset-standards.yaml"
  CHANGESETSTANDARDS_CHECKS: "RollbackRequired,ChangesetLabelCheck,ChangesetContextCheck,ChangesetCommentCheck,OneChangePerChangeset,RequireChangesetIDisUUID"
  CHANGESETSTANDARDS_PKGNAME: "changeset-standards.pkg"  
  
  CODINGSTANDARDS_FILE: "liquibase.checks.coding-standards.yaml"  
  CODINGSTANDARDS_CHECKS: "CheckTablesForIndex,TableCommentCheck"
  CODINGSTANDARDS_PKGNAME: "coding-standards.pkg"
  
  CHECKSPACKAGE_MASTERFILE: "liquibase.checks-package.yaml" 
  


## Note: Any command which fails in any stage below result in the command stopping, and endStage being run.
## A flow file can have one or more stages, each with multiple "actions", 
## or your flow file can have multiple stages with fewer actions in each stage.
stages:


  ## A prep stage. There can be more than one stage if desired.
  stage-mkdir:

    actions:
      # create dir for checks package yaml files to be created in later
      - type: shell
        command: bash -c "mkdir -p ${CHKSPKGSDIR}"
      - type: shell
        command: bash -c "echo 'Made dir ${CHKSPKGSDIR}'"




  ## turn off all checks
  stage-checks-disable:
        
    actions:
      #
      # turn off checks, this will auto perform checks show as well
      #
      - type: liquibase
        command: checks bulkset
        cmdArgs: {disable: true, force: true}

          

  ###### now  this is procedural for now, but could be decomposed into flowfiles since there is a ton of repeat, just with different names
  ###### but that is en exercise for later!


  ## CREATE checks settings files to be used in package
  stage-access-control-yaml:
  
    stageVariables:
      THISFILE: "${ACCESSCONTROL_FILE}" 
      THESECHECKS: "${ACCESSCONTROL_CHECKS}"

    actions:      
      #
      # turn on some checks
      #
      - type: liquibase
        command: checks enable
        cmdArgs: {check-name: "${THESECHECKS}"}
      #
      # show all checks just enabled
      #
      - type: liquibase
        command: checks show
        cmdArgs: {check-status: enabled}

      # create yaml file
      - type: shell
        command: bash -c "touch ${CHKSPKGSDIR}/${THISFILE};echo 'created file ${CHKSPKGSDIR}/${THISFILE}'"
      - type: shell
        command: bash -c "cp ${BASECHECKSFILE} ${CHKSPKGSDIR}/${THISFILE};echo 'copied enabled checks to ${CHKSPKGSDIR}/${THISFILE}'"

      #
      # turn off checks, this will auto perform checks show as well
      #
      - type: liquibase
        command: checks bulkset
        cmdArgs: {disable: true, force: true}




  ## CREATE checks settings files to be used in package
  stage-data-protection-yaml:
  
    stageVariables:
      THISFILE: "${DATAPROTECTION_FILE}" 
      THESECHECKS: "${DATAPROTECTION_CHECKS}"

    actions:      
      #
      # turn on some checks
      #
      - type: liquibase
        command: checks enable
        cmdArgs: {check-name: "${THESECHECKS}"}
      #
      # show all checks just enabled
      #
      - type: liquibase
        command: checks show
        cmdArgs: {check-status: enabled}

      # create yaml file
      - type: shell
        command: bash -c "touch ${CHKSPKGSDIR}/${THISFILE};echo 'created file ${CHKSPKGSDIR}/${THISFILE}'"
      - type: shell
        command: bash -c "cp ${BASECHECKSFILE} ${CHKSPKGSDIR}/${THISFILE};echo 'copied enabled checks to ${CHKSPKGSDIR}/${THISFILE}'"

      #
      # turn off checks, this will auto perform checks show as well
      #
      - type: liquibase
        command: checks bulkset
        cmdArgs: {disable: true, force: true}



  ## CREATE checks settings files to be used in package
  stage-schema-protection-yaml:
  
    stageVariables:
      THISFILE: "${SCHEMAPROTECTION_FILE}" 
      THESECHECKS: "${SCHEMAPROTECTION_CHECKS}"

    actions:      
      #
      # turn on some checks
      #
      - type: liquibase
        command: checks enable
        cmdArgs: {check-name: "${THESECHECKS}"}
      #
      # show all checks just enabled
      #
      - type: liquibase
        command: checks show
        cmdArgs: {check-status: enabled}

      # create yaml file
      - type: shell
        command: bash -c "touch ${CHKSPKGSDIR}/${THISFILE};echo 'created file ${CHKSPKGSDIR}/${THISFILE}'"
      - type: shell
        command: bash -c "cp ${BASECHECKSFILE} ${CHKSPKGSDIR}/${THISFILE};echo 'copied enabled checks to ${CHKSPKGSDIR}/${THISFILE}'"

      #
      # turn off checks, this will auto perform checks show as well
      #
      - type: liquibase
        command: checks bulkset
        cmdArgs: {disable: true, force: true}
        

  ## CREATE checks settings files to be used in package
  stage-changeset-standards-yaml:
  
    stageVariables:
      THISFILE: "${CHANGESETSTANDARDS_FILE}" 
      THESECHECKS: "${CHANGESETSTANDARDS_CHECKS}"

    actions:      
      #
      # turn on some checks
      #
      - type: liquibase
        command: checks enable
        cmdArgs: {check-name: "${THESECHECKS}"}
      #
      # show all checks just enabled
      #
      - type: liquibase
        command: checks show
        cmdArgs: {check-status: enabled}

      # create yaml file
      - type: shell
        command: bash -c "touch ${CHKSPKGSDIR}/${THISFILE};echo 'created file ${CHKSPKGSDIR}/${THISFILE}'"
      - type: shell
        command: bash -c "cp ${BASECHECKSFILE} ${CHKSPKGSDIR}/${THISFILE};echo 'copied enabled checks to ${CHKSPKGSDIR}/${THISFILE}'"

      #
      # turn off checks, this will auto perform checks show as well
      #
      - type: liquibase
        command: checks bulkset
        cmdArgs: {disable: true, force: true}        


  ## CREATE checks settings files to be used in package
  stage-coding-standards-yaml:
  
    stageVariables:
      THISFILE: "${CODINGSTANDARDS_FILE}" 
      THESECHECKS: "${CODINGSTANDARDS_CHECKS}"

    actions:      
      #
      # turn on some checks
      #
      - type: liquibase
        command: checks enable
        cmdArgs: {check-name: "${THESECHECKS}"}
      #
      # show all checks just enabled
      #
      - type: liquibase
        command: checks show
        cmdArgs: {check-status: enabled}

      # create yaml file
      - type: shell
        command: bash -c "touch ${CHKSPKGSDIR}/${THISFILE};echo 'created file ${CHKSPKGSDIR}/${THISFILE}'"
      - type: shell
        command: bash -c "cp ${BASECHECKSFILE} ${CHKSPKGSDIR}/${THISFILE};echo 'copied enabled checks to ${CHKSPKGSDIR}/${THISFILE}'"

      #
      # turn off checks, this will auto perform checks show as well
      #
      - type: liquibase
        command: checks bulkset
        cmdArgs: {disable: true, force: true}
        
        
       
        
  ## CREATE the checks package file using the just created themed checks-settings config yaml files
  stage-add-access-control-pkg-to-chkspkg-file:
  
    stageVariables:
      THISPKG_FILE: "${CHECKSPACKAGE_MASTERFILE}"
      THISPKG_NAME: "${ACCESSCONTROL_PKGNAME}"
      THISPKG_CONTENTS: "${ACCESSCONTROL_FILE}"
      
    actions:
      #
      # create package file with package names and checks - ACCESSCONTROL
      #
      - type: liquibase
        command: checks create
        cmdArgs: {package-file: "${THISPKG_FILE}", package-name: "${THISPKG_NAME}", package-contents: "${CHKSPKGSDIR}/${THISPKG_CONTENTS}"}   
        
        
        
        
        
  ## CREATE the checks package file using the just created themed checks-settings config yaml files
  stage-add-data-protection-pkg-to-chkspkg-file:
  
    stageVariables:
      THISPKG_FILE: "${CHECKSPACKAGE_MASTERFILE}"
      THISPKG_NAME: "${DATAPROTECTION_PKGNAME}"
      THISPKG_CONTENTS: "${DATAPROTECTION_FILE}"
      
    actions:
      #
      # create package file with package names and checks - ACCESSCONTROL
      #
      - type: liquibase
        command: checks create
        cmdArgs: {package-file: "${THISPKG_FILE}", package-name: "${THISPKG_NAME}", package-contents: "${CHKSPKGSDIR}/${THISPKG_CONTENTS}"}          


  ## CREATE the checks package file using the just created themed checks-settings config yaml files
  stage-add-schema-protection-pkg-to-chkspkg-file:
  
    stageVariables:
      THISPKG_FILE: "${CHECKSPACKAGE_MASTERFILE}"
      THISPKG_NAME: "${SCHEMAPROTECTION_PKGNAME}"
      THISPKG_CONTENTS: "${SCHEMAPROTECTION_FILE}"
      
    actions:
      #
      # create package file with package names and checks - ACCESSCONTROL
      #
      - type: liquibase
        command: checks create
        cmdArgs: {package-file: "${THISPKG_FILE}", package-name: "${THISPKG_NAME}", package-contents: "${CHKSPKGSDIR}/${THISPKG_CONTENTS}"}          


  ## CREATE the checks package file using the just created themed checks-settings config yaml files
  stage-add-changeset-standards-pkg-to-chkspkg-file:
  
    stageVariables:
      THISPKG_FILE: "${CHECKSPACKAGE_MASTERFILE}"
      THISPKG_NAME: "${CHANGESETSTANDARDS_PKGNAME}"
      THISPKG_CONTENTS: "${CHANGESETSTANDARDS_FILE}"
      
    actions:
      #
      # create package file with package names and checks - ACCESSCONTROL
      #
      - type: liquibase
        command: checks create
        cmdArgs: {package-file: "${THISPKG_FILE}", package-name: "${THISPKG_NAME}", package-contents: "${CHKSPKGSDIR}/${THISPKG_CONTENTS}"}          



  ## CREATE the checks package file using the just created themed checks-settings config yaml files
  stage-add-coding-standards-pkg-to-chkspkg-file:
  
    stageVariables:
      THISPKG_FILE: "${CHECKSPACKAGE_MASTERFILE}"
      THISPKG_NAME: "${CODINGSTANDARDS_PKGNAME}"
      THISPKG_CONTENTS: "${CODINGSTANDARDS_FILE}"
      
    actions:
      #
      # create package file with package names and checks - ACCESSCONTROL
      #
      - type: liquibase
        command: checks create
        cmdArgs: {package-file: "${THISPKG_FILE}", package-name: "${THISPKG_NAME}", package-contents: "${CHKSPKGSDIR}/${THISPKG_CONTENTS}"}          


  ############## ADD TO THE EXISTING CHECKS PACKAGE FILE WHICH SHIPS WITH THE PRODUCT
  ## CREATE the checks package file and add intro boilerplate info
  stage-prepend-to-chkspkg-file:
    
    stageVariables:
      THISPKG_FILE: "${CHECKSPACKAGE_MASTERFILE}"
      
      #
      # add boiler plate info
      #
      - type: shell
        #command: bash -c "printf '%s\n%s\n' ${CHECKSPACKAGE_MASTERFILE_HEADER} $(cat ${THISPKG_FILE}) >${THISPKG_FILE}"
        command: bash -c "echo 'printf %s\n%s\n ${CHECKSPACKAGE_MASTERFILE_HEADER} $(cat ${THISPKG_FILE}) >${THISPKG_FILE}'"

  
  





## The endStage ALWAYS RUNS. 
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file.

endStage:
  actions:
    - type: shell
      command: bash -c "echo 'New Checks Package file ${CHECKSPACKAGE_MASTERFILE}'"
      
      
      
      
      
      
      
